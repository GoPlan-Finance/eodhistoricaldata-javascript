"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * EOD Historical Data API
 * EOD Historical Data API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sam@sddproductions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangesApi = exports.ExchangesApiFactory = exports.ExchangesApiFp = exports.ExchangesApiAxiosParamCreator = exports.AssetsApi = exports.AssetsApiFactory = exports.AssetsApiFp = exports.AssetsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * AssetsApi - axios parameter creator
 * @export
 */
const AssetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetFundamentalsGeneralSection: (ticker, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ticker' is not null or undefined
            common_1.assertParamExists('assetFundamentalsGeneralSection', 'ticker', ticker);
            const localVarPath = `/fundamentals/{ticker}?fmt=json&filter=General`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            yield common_1.setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realTimeQuote: (ticker, s, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ticker' is not null or undefined
            common_1.assertParamExists('realTimeQuote', 'ticker', ticker);
            const localVarPath = `/real-time/{ticker}?fmt=json`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            yield common_1.setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Search symbols
         * @param {string} query Name of ticker or search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAsset: (query, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'query' is not null or undefined
            common_1.assertParamExists('searchAsset', 'query', query);
            const localVarPath = `/search/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            yield common_1.setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AssetsApiAxiosParamCreator = AssetsApiAxiosParamCreator;
/**
 * AssetsApi - functional programming interface
 * @export
 */
const AssetsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AssetsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetFundamentalsGeneralSection(ticker, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assetFundamentalsGeneralSection(ticker, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realTimeQuote(ticker, s, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.realTimeQuote(ticker, s, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Search symbols
         * @param {string} query Name of ticker or search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAsset(query, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.searchAsset(query, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AssetsApiFp = AssetsApiFp;
/**
 * AssetsApi - factory interface
 * @export
 */
const AssetsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AssetsApiFp(configuration);
    return {
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetFundamentalsGeneralSection(ticker, options) {
            return localVarFp.assetFundamentalsGeneralSection(ticker, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Asset fundamentals
         * @param {string} ticker Asset Ticker
         * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realTimeQuote(ticker, s, options) {
            return localVarFp.realTimeQuote(ticker, s, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Search symbols
         * @param {string} query Name of ticker or search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAsset(query, options) {
            return localVarFp.searchAsset(query, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AssetsApiFactory = AssetsApiFactory;
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
class AssetsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    assetFundamentalsGeneralSection(ticker, options) {
        return exports.AssetsApiFp(this.configuration).assetFundamentalsGeneralSection(ticker, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    realTimeQuote(ticker, s, options) {
        return exports.AssetsApiFp(this.configuration).realTimeQuote(ticker, s, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Search symbols
     * @param {string} query Name of ticker or search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    searchAsset(query, options) {
        return exports.AssetsApiFp(this.configuration).searchAsset(query, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssetsApi = AssetsApi;
/**
 * ExchangesApi - axios parameter creator
 * @export
 */
const ExchangesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Search symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExchanges: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/exchanges-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            yield common_1.setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Search symbols
         * @param {string} exchangeCode ExchangeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSymbols: (exchangeCode, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'exchangeCode' is not null or undefined
            common_1.assertParamExists('listSymbols', 'exchangeCode', exchangeCode);
            const localVarPath = `/exchange-symbol-list/{exchangeCode}?fmt=json`
                .replace(`{${"exchangeCode"}}`, encodeURIComponent(String(exchangeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            yield common_1.setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ExchangesApiAxiosParamCreator = ExchangesApiAxiosParamCreator;
/**
 * ExchangesApi - functional programming interface
 * @export
 */
const ExchangesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ExchangesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Search symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExchanges(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listExchanges(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Search symbols
         * @param {string} exchangeCode ExchangeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSymbols(exchangeCode, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSymbols(exchangeCode, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ExchangesApiFp = ExchangesApiFp;
/**
 * ExchangesApi - factory interface
 * @export
 */
const ExchangesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ExchangesApiFp(configuration);
    return {
        /**
         *
         * @summary Search symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExchanges(options) {
            return localVarFp.listExchanges(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Search symbols
         * @param {string} exchangeCode ExchangeCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSymbols(exchangeCode, options) {
            return localVarFp.listSymbols(exchangeCode, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ExchangesApiFactory = ExchangesApiFactory;
/**
 * ExchangesApi - object-oriented interface
 * @export
 * @class ExchangesApi
 * @extends {BaseAPI}
 */
class ExchangesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Search symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    listExchanges(options) {
        return exports.ExchangesApiFp(this.configuration).listExchanges(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Search symbols
     * @param {string} exchangeCode ExchangeCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    listSymbols(exchangeCode, options) {
        return exports.ExchangesApiFp(this.configuration).listSymbols(exchangeCode, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ExchangesApi = ExchangesApi;
//# sourceMappingURL=api.js.map