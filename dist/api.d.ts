/**
 * EOD Historical Data API
 * EOD Historical Data API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sam@sddproductions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AssetFundamentalsSectionGeneral
 */
export interface AssetFundamentalsSectionGeneral {
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Code: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Type: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Name: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Exchange: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CurrencyCode?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CurrencyName?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CurrencySymbol?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CountryName?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CountryISO?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    ISIN?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CUSIP?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    CIK?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    EmployerIdNumber?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    FiscalYearEnd?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    IPODate?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    InternationalDomestic?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Sector?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Industry?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    GicSector?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    GicGroup?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    GicIndustry?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    GicSubIndustry?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    HomeCategory?: string;
    /**
     *
     * @type {boolean}
     * @memberof AssetFundamentalsSectionGeneral
     */
    IsDelisted?: boolean;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Description?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Address?: string;
    /**
     *
     * @type {AssetFundamentalsSectionGeneralAddressData}
     * @memberof AssetFundamentalsSectionGeneral
     */
    AddressData?: AssetFundamentalsSectionGeneralAddressData;
    /**
     *
     * @type {Array<object>}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Listings?: Array<object>;
    /**
     *
     * @type {Array<object>}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Officers?: Array<object>;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    Phone?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    WebURL?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    LogoURL?: string;
    /**
     *
     * @type {number}
     * @memberof AssetFundamentalsSectionGeneral
     */
    FullTimeEmployees?: number;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneral
     */
    UpdatedAt?: string;
}
/**
 *
 * @export
 * @interface AssetFundamentalsSectionGeneralAddressData
 */
export interface AssetFundamentalsSectionGeneralAddressData {
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneralAddressData
     */
    Street?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneralAddressData
     */
    City?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneralAddressData
     */
    State?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneralAddressData
     */
    Country?: string;
    /**
     *
     * @type {string}
     * @memberof AssetFundamentalsSectionGeneralAddressData
     */
    ZIP?: string;
}
/**
 *
 * @export
 * @interface AssetQuote
 */
export interface AssetQuote {
    /**
     *
     * @type {string}
     * @memberof AssetQuote
     */
    code: string;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    timestamp: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    gmtoffset: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    open: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    high: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    low: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    close: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    volume: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    previousClose: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    change: number;
    /**
     *
     * @type {number}
     * @memberof AssetQuote
     */
    change_p: number;
}
/**
 *
 * @export
 * @interface Exchange
 */
export interface Exchange {
    /**
     *
     * @type {string}
     * @memberof Exchange
     */
    Code: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Exchange
     */
    OperatingMIC: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Exchange
     */
    Name: string;
    /**
     *
     * @type {string}
     * @memberof Exchange
     */
    Country: string;
    /**
     *
     * @type {string}
     * @memberof Exchange
     */
    Currency: string;
}
/**
 *
 * @export
 * @interface Symbol
 */
export interface Symbol {
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Code: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Exchange: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Name: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Country: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Currency: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Type?: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    Isin?: string;
}
/**
 *
 * @export
 * @interface SymbolSearch
 */
export interface SymbolSearch {
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Code: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Exchange: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Name: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Country: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Currency: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    Type?: string;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    ISIN?: string;
    /**
     *
     * @type {number}
     * @memberof SymbolSearch
     */
    previousClose?: number;
    /**
     *
     * @type {string}
     * @memberof SymbolSearch
     */
    previousCloseDate?: string;
}
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export declare const AssetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetFundamentalsGeneralSection: (ticker: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realTimeQuote: (ticker: string, s?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Search symbols
     * @param {string} query Name of ticker or search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAsset: (query: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AssetsApi - functional programming interface
 * @export
 */
export declare const AssetsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetFundamentalsGeneralSection(ticker: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetFundamentalsSectionGeneral>>;
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realTimeQuote(ticker: string, s?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetQuote>>>;
    /**
     *
     * @summary Search symbols
     * @param {string} query Name of ticker or search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAsset(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymbolSearch>>>;
};
/**
 * AssetsApi - factory interface
 * @export
 */
export declare const AssetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetFundamentalsGeneralSection(ticker: string, options?: any): AxiosPromise<AssetFundamentalsSectionGeneral>;
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realTimeQuote(ticker: string, s?: string, options?: any): AxiosPromise<Array<AssetQuote>>;
    /**
     *
     * @summary Search symbols
     * @param {string} query Name of ticker or search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAsset(query: string, options?: any): AxiosPromise<Array<SymbolSearch>>;
};
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export declare class AssetsApi extends BaseAPI {
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    assetFundamentalsGeneralSection(ticker: string, options?: any): Promise<import("axios").AxiosResponse<AssetFundamentalsSectionGeneral>>;
    /**
     *
     * @summary Get Asset fundamentals
     * @param {string} ticker Asset Ticker
     * @param {string} [s] Extra tickers to fetch separated by a \&quot;,\&quot; (Max recommended by EOD is 15-20 tickers)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    realTimeQuote(ticker: string, s?: string, options?: any): Promise<import("axios").AxiosResponse<AssetQuote[]>>;
    /**
     *
     * @summary Search symbols
     * @param {string} query Name of ticker or search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    searchAsset(query: string, options?: any): Promise<import("axios").AxiosResponse<SymbolSearch[]>>;
}
/**
 * ExchangesApi - axios parameter creator
 * @export
 */
export declare const ExchangesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Search symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listExchanges: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Search symbols
     * @param {string} exchangeCode ExchangeCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols: (exchangeCode: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ExchangesApi - functional programming interface
 * @export
 */
export declare const ExchangesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Search symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listExchanges(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exchange>>>;
    /**
     *
     * @summary Search symbols
     * @param {string} exchangeCode ExchangeCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols(exchangeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Symbol>>>;
};
/**
 * ExchangesApi - factory interface
 * @export
 */
export declare const ExchangesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Search symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listExchanges(options?: any): AxiosPromise<Array<Exchange>>;
    /**
     *
     * @summary Search symbols
     * @param {string} exchangeCode ExchangeCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols(exchangeCode: string, options?: any): AxiosPromise<Array<Symbol>>;
};
/**
 * ExchangesApi - object-oriented interface
 * @export
 * @class ExchangesApi
 * @extends {BaseAPI}
 */
export declare class ExchangesApi extends BaseAPI {
    /**
     *
     * @summary Search symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    listExchanges(options?: any): Promise<import("axios").AxiosResponse<Exchange[]>>;
    /**
     *
     * @summary Search symbols
     * @param {string} exchangeCode ExchangeCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    listSymbols(exchangeCode: string, options?: any): Promise<import("axios").AxiosResponse<Symbol[]>>;
}
